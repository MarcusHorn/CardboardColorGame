from tkinter import *
import math
import random
from random import *

# circle class
class Circle(object):
    def __init__(self, angle, color, data):
        self.angle = angle
        self.x = int(data.boardRadius + data.boardRadius * math.cos(self.angle))
        self.y = int(data.boardRadius + data.boardRadius * math.sin(self.angle))
        self.r = data.circleRadius
        self.color = color
        
    def updateCircle(self, dAngle):
        self.angle += dAngle
        self.angle %= 360
        radianAngle = angle * (math.pi/180) #Used for math.cos and math.sin
        self.x = (boardRadius + boardRadius*math.cos(radianAngle)) // 1
        self.y = (boardRadius + boardRadius*math.sin(radianAngle)) // 1
        self.r = circleRadius - (circleRadius*math.sin(radianAngle)) // 2
        
    def getCoords(self):
        return self.x, self.y
        
    def getColor(self):
        return self.color
        
    def getRadius(self):
        return self.r
    
    def validClickInsideCircle(self, x, y):
        return ((x-self.x)**2 + (y-self.y)**2)**.5 <= self.r
        
    def __eq__(self, other):
        return self.color == other.color
        
    # do we keep it or not
    def connect(self):
        self.connected = True

    def updateSpeed(self):
        pass

class targetCircle(self, targetColor, data):
    def __init__(self):
        self.x = data.width//2
        # change afterwords
        self.y = data.height//2
        self.color = targetColor


# game data
def init(data):
    data.numberOfCircles = 3
    data.cicleRadius = getCircleRadius(data)
    data.boardRadius = data.width//2 - data.cicleRadius
    data.targetRadius = data.width//8
    data.deltaAngle = 0

# put it in the run function
def init_1(data):
    data.circleList = []
    data.numOfCircles = data.numberOfCircles + data.level
    

def getCircleRadius(data):
    circumferenceBoard = 2 * math.pi * data.width
    orbit = circumferenceBoard//data.numberOfCircles
    return orbit//(math.pi*2)

def generateCircles(data):
    angle = (math.pi * 2)//data.numberOfCircles
    for circles in range(data.numberOfCircles):
        r, g, b = randint(0,255), randint(0,255), randint(0,255)
        color = rgbString(r, g, b)
        data.circleList.append(Circle(angle, color, data))
    targetIndex = randint(0, data.numberOfCircles - 1)
    targetColor = data.circleList[targetIndex].color
    data.targetCircle = targetCircle(targetColor, data)


# from notes
def rgbString(red, green, blue):
    return "#%02x%02x%02x" % (red, green, blue)

def mousePressed(event, data):
    x, y = event.x, event.y
    for circle in range(data.numberOfCircles):
        if circle.validClickInsideCircle(x, y) and circle==data.targetCircle:




def keyPressed(event, data):
    # use event.char and event.keysym
    pass

def timerFired(data):
    pass

def redrawAll(canvas, data):
    # draw in canvas
    pass

####################################
# use the run function as-is
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 100 # milliseconds
    init(data)
    # create the root and the canvas
    root = Tk()
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

#Hack112 - CardBoard

from tkinter import *

def init(data):
    data.cx = data.width/2
    data.cy = data.height/2
    data.r = 10
    data.step = 0
    #data.targetCirlce = Circle()
    data.circles = []

def mousePressed(event, data):
    pass

def keyPressed(event, data):
    pass

def timerFired(data):
    data.step += 1
    pass

def redrawAll(canvas, data):
    data.targetCircle.draw()
    drawSurroundingCircles(canvas, data)
    canvas.create_rectangle(0,0,100,data.height/6,fill="red")
    canvas.create_oval(data.width/10,data.height/10*2,data.width/10*9,data.height/10*9,fill="white")

def draw(self, data):
    (top, left) = (self.x - self.r, self.y - self.r)
    (bottom, left) = (self.x + self.r, self.y + self.r)
    color = rgbString(self.color)
    canvas.create_oval = (top, left, bottom, right, fill=color)

def drawSurroundingCircles(canvas, data):
    for circle in range(len(data.circles)):
        circle.draw()

####################################
# Run
####################################

def runGame():
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.timerDelay = 100 # milliseconds
    root = Tk()
    data.root = root
    data.height = (14/16)* root.winfo_screenheight()
    data.width = (4/5) * root.winfo_screenheight()
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

runGame()
